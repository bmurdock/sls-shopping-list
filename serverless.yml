service: sls-shopping-list

  
provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  environment:
    DYNAMODB_TABLE: ${opt:stage, self:provider.stage}-${self:service}
    TWILIO_SID: AC606592bd99432da0da33e8c41dddf976
    TWILIO_AUTH: 4c699ee06c9d1923313c5e5d4f7c02cd
    TWILIO_PHONE: 12512774931
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - s3:PutObject
        - s3:GetObject
      Resource: 
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
        - "arn:aws:s3:::${self:custom.bucket}/*"
functions:
  sendText:
    handler: twilio/sendText.sendText
    events:
      - http:
          path: api/sendText
          method: post
          integration: lambda
          cors: true
  receiveText:
      handler: twilio/receiveText.receiveText
      events:
        - http:
            path: api/receiveText
            method: post
            integration: lambda
  create:
    handler: shopping/create.create
    events:
      - http:
          path: shopping
          method: post
          cors: true
  list:
    handler: shopping/list.list
    events:
      - http:
          path: shopping
          method: get
          cors: true

  read:
    handler: shopping/read.read
    events:
      - http:
          path: shopping/{id}
          method: get
          cors: true

  update:
    handler: shopping/update.update
    events:
      - http:
          path: shopping/{id}
          method: put
          cors: true

  delete:
    handler: shopping/delete.delete
    events:
      - http:
          path: shopping/{id}
          method: delete
          cors: true
  s3put:
    handler: s3/put.put
    environment:
      BUCKET: ${self:custom.bucket}
resources:
  Resources:
    NewResource:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: sls-shopping-list
    DynamoTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
plugins:
  - serverless-plugin-scripts
custom:
  bucket: shopping-list-bucket
  scripts:
    hooks:
      'deploy:finalize': sls invoke -f sendText --path init.json